/*
  USCONFIG.h
  this file is generated. Do not change!
*/

#ifndef USGLOBALCONFIG_H
#define USGLOBALCONFIG_H

#cmakedefine US_BUILD_SHARED_LIBS
#cmakedefine US_ENABLE_THREADING_SUPPORT
#cmakedefine US_HAVE_VISIBILITY_ATTRIBUTE

//-------------------------------------------------------------------
// Header Availability
//-------------------------------------------------------------------

#cmakedefine US_HAVE_CXXABI_H

///-------------------------------------------------------------------
// Version information
//-------------------------------------------------------------------

#define CppMicroServices_MAJOR_VERSION @CppMicroServices_MAJOR_VERSION@
#define CppMicroServices_MINOR_VERSION @CppMicroServices_MINOR_VERSION@
#define CppMicroServices_PATCH_VERSION @CppMicroServices_PATCH_VERSION@
#define CppMicroServices_VERSION @CppMicroServices_VERSION@
#define CppMicroServices_VERSION_STR "@CppMicroServices_VERSION@"

#define US_MAJOR_VERSION @CppMicroServices_MAJOR_VERSION@
#define US_MINOR_VERSION @CppMicroServices_MINOR_VERSION@
#define US_PATCH_VERSION @CppMicroServices_PATCH_VERSION@
#define US_VERSION @CppMicroServices_VERSION@
#define US_VERSION_STR "@CppMicroServices_VERSION@"

//-------------------------------------------------------------------
// Namespace customization
//-------------------------------------------------------------------

#define US_NAMESPACE @US_NAMESPACE@

#ifndef US_NAMESPACE /* user namespace */

  # define US_PREPEND_NAMESPACE(name) ::name
  # define US_USE_NAMESPACE
  # define US_BEGIN_NAMESPACE
  # define US_END_NAMESPACE

#else /* user namespace */

  # define US_PREPEND_NAMESPACE(name) ::US_NAMESPACE::name
  # define US_USE_NAMESPACE using namespace ::US_NAMESPACE;
  # define US_BEGIN_NAMESPACE namespace US_NAMESPACE {
  # define US_END_NAMESPACE }

#endif /* user namespace */

//-------------------------------------------------------------------
// Platform defines
//-------------------------------------------------------------------

#if defined(__APPLE__)
  #define US_PLATFORM_APPLE
#endif

#if defined(__linux__)
  #define US_PLATFORM_LINUX
#endif

#if defined(_WIN32) || defined(_WIN64)
  #define US_PLATFORM_WINDOWS
#else
  #define US_PLATFORM_POSIX
#endif

#cmakedefine US_BIG_ENDIAN
#cmakedefine US_LITTLE_ENDIAN

///-------------------------------------------------------------------
// Macros for import/export declarations
//-------------------------------------------------------------------

#if defined(US_PLATFORM_WINDOWS)
  #define US_ABI_EXPORT __declspec(dllexport)
  #define US_ABI_IMPORT __declspec(dllimport)
  #define US_ABI_LOCAL
#elif defined(US_HAVE_VISIBILITY_ATTRIBUTE)
  #define US_ABI_EXPORT __attribute__ ((visibility ("default")))
  #define US_ABI_IMPORT __attribute__ ((visibility ("default")))
  #define US_ABI_LOCAL  __attribute__ ((visibility ("hidden")))
#else
  #define US_ABI_EXPORT
  #define US_ABI_IMPORT
  #define US_ABI_LOCAL
#endif

//-------------------------------------------------------------------
// Macros for suppressing warnings
//-------------------------------------------------------------------

#ifdef _MSC_VER
#define US_MSVC_PUSH_DISABLE_WARNING(wn) \
__pragma(warning(push))                  \
__pragma(warning(disable:wn))
#define US_MSVC_POP_WARNING \
__pragma(warning(pop))
#define US_MSVC_DISABLE_WARNING(wn) \
__pragma(warning(disable:wn))
#else
#define US_MSVC_PUSH_DISABLE_WARNING(wn)
#define US_MSVC_POP_WARNING
#define US_MSVC_DISABLE_WARNING(wn)
#endif

// Do not warn about the usage of deprecated unsafe functions
US_MSVC_DISABLE_WARNING(4996)

// Mark a variable or expression result as unused
#define US_UNUSED(x) (void)(x)


//-------------------------------------------------------------------
// Hash Container
//-------------------------------------------------------------------

#define US_HASH_FUNCTION_BEGIN(type)                         \
namespace std {                                              \
template<>                                                   \
struct hash<type> : std::unary_function<type, std::size_t> { \
std::size_t operator()(const type& arg) const {

#define US_HASH_FUNCTION_END } }; }


//-------------------------------------------------------------------
// Utility macros
//-------------------------------------------------------------------

#define US_STR_(x) #x
#define US_STR(x) US_STR_(x)
#define US_CONCAT_(x,y) x ## y
#define US_CONCAT(x,y) US_CONCAT_(x,y)

#endif // USGLOBALCONFIG_H
